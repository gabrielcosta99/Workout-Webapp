@page
@model MyWebApp.Pages.Workouts.CreateModel
@{
    ViewData["Title"] = "Create Workout";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">
                        <i class="fas fa-dumbbell me-2"></i>Create New Workout
                    </h2>
                </div>
                <div class="card-body">
                    <form method="post">
                        <!-- Workout Title -->
                        <div class="mb-3">
                            <label asp-for="WorkoutViewModel.Title" class="form-label fw-bold"></label>
                            <input asp-for="WorkoutViewModel.Title" class="form-control form-control-lg"
                                   placeholder="Enter workout title (e.g., Upper Body, Leg Day)" />
                            <span asp-validation-for="WorkoutViewModel.Title" class="text-danger"></span>
                        </div>

                        

                        <!-- Exercise Selection -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Select Exercises</label>
                            <!-- Search bar -->
                            <input type="text" id="searchBar" placeholder="Search..." class="form-control mb-3" />

                            <div class="row">
                                @for (int i = 0; i < Model.WorkoutViewModel.AvailableExercises.Count; i++)
                                {
                                    <div class="col-md-6 col-lg-4 mb-3">
                                        <div class="card h-100 exercise-card" id="exercise-@Model.WorkoutViewModel.AvailableExercises[i].Id">
                                            <div class="card-body p-3">
                                                <div class="form-check">
                                                    <input type="hidden" asp-for="WorkoutViewModel.AvailableExercises[i].Id" />
                                                    <input type="hidden" asp-for="WorkoutViewModel.AvailableExercises[i].Name" />
                                                    <input type="hidden" asp-for="WorkoutViewModel.AvailableExercises[i].MaxReps" />
                                                    <input type="hidden" asp-for="WorkoutViewModel.AvailableExercises[i].MaxWeight" />

                                                    <input class="form-check-input exercise-checkbox"
                                                           type="checkbox"
                                                           value="@Model.WorkoutViewModel.AvailableExercises[i].Id"
                                                           name="WorkoutViewModel.SelectedExerciseIds"
                                                           id="exercise_@Model.WorkoutViewModel.AvailableExercises[i].Id"
                                                           @(Model.WorkoutViewModel.AvailableExercises[i].IsSelected ? "checked" : "") />

                                                    <label class="form-check-label w-100"
                                                           for="exercise_@Model.WorkoutViewModel.AvailableExercises[i].Id">
                                                        <div class="fw-bold">@Model.WorkoutViewModel.AvailableExercises[i].Name</div>
                                                        <small class="text-muted">
                                                            @if (Model.WorkoutViewModel.AvailableExercises[i].MaxReps.HasValue)
                                                            {
                                                                <span>Max Reps: @Model.WorkoutViewModel.AvailableExercises[i].MaxReps</span>
                                                            }
                                                            @if (Model.WorkoutViewModel.AvailableExercises[i].MaxWeight.HasValue)
                                                            {
                                                                <span>Max Weight: @Model.WorkoutViewModel.AvailableExercises[i].MaxWeight kg</span>
                                                            }
                                                        </small>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            @if (Model.WorkoutViewModel.AvailableExercises.Count == 0)
                            {
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    No exercises available. Please <a href="/Exercises/Create">create some exercises</a> first.
                                </div>
                            }
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="/Workouts" class="btn btn-secondary me-md-2">
                                <i class="fas fa-arrow-left me-1"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>Create Workout
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .row {
        row-gap: 1rem;
    }

    .exercise-card {
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid #e9ecef;
        border-radius: 1rem;
        background: #fff;
    }

        .exercise-card:hover {
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            transform: translateY(-4px) scale(1.02);
        }

        .exercise-card .fw-bold {
            font-size: 1.1rem;
        }

        .exercise-card small {
            display: block;
            margin-top: 4px;
        }
    .form-check-label {
        cursor: pointer;
    }

    .exercise-checkbox {
        transform: scale(1.2);
    }

    .card-header {
        background: linear-gradient(135deg, #0d6efd 0%, #6610f2 100%);
        border-radius: 0.75rem 0.75rem 0 0;
        box-shadow: inset 0 -2px 4px rgba(0,0,0,0.15);
    }

    .btn-primary {
        border-radius: 30px;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
    }
</style>

<script>
    // Search bar handler
    const searchBar = document.getElementById('searchBar');
    const items = document.querySelectorAll('.col-md-6.col-lg-4');
    searchBar.addEventListener('keyup', function() {
        const searchValue = searchBar.value.toLowerCase();

        items.forEach(item => {
            const label = item.querySelector('.form-check-label').textContent.toLowerCase();
            if (label.includes(searchValue)) {
                item.classList.remove('d-none');
            } else {
                item.classList.add('d-none');
            }
        });
    });

    // Add click handler to make entire card clickable
    document.addEventListener('DOMContentLoaded', function() {
        const exerciseCards = document.querySelectorAll('.exercise-card');

        exerciseCards.forEach(card => {
            card.addEventListener('click', function(e) {
                const checkbox = card.querySelector('.exercise-checkbox');
                checkbox.checked = !checkbox.checked;

                // Trigger change event for any additional handlers
                checkbox.dispatchEvent(new Event('change'));
            });
        });

         // document.querySelectorAll('.exercise-card').forEach(card => {
         //    card.addEventListener('click', function() {
         //        const checkbox = this.querySelector('.exercise-checkbox');
         //        if (checkbox.checked) {
         //            this.style.borderColor = '#0d6efd';
         //            this.style.backgroundColor = '#f8f9ff';
         //        } else {
         //            this.style.borderColor = '#e9ecef';
         //            this.style.backgroundColor = '';
         //        }
         //    });

         // });


        //Update card appearance when checkbox state changes
        document.querySelectorAll('.exercise-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const card = this.closest('.exercise-card');
                if (this.checked) {
                    card.style.borderColor = '#0d6efd';
                    card.style.backgroundColor = '#f8f9ff';
                } else {
                    card.style.borderColor = '#e9ecef';
                    card.style.backgroundColor = '';
                }
            });
        });
    });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}