@page
@model MyWebApp.Pages.Progress.WorkoutProgressModel
@{
    ViewData["Title"] = "Workout Progress";
}

<h2>Workout Progress</h2>

@if (Model.Exercises.Any())
{

    @foreach (var exercise in Model.Exercises)
    {
        
        <div class="exercise-card d-none" id="exercise-@exercise.Id">
            <h4>@exercise.Name</h4>
            <div style="display: flex; gap: 10px">
                <div>
                    <label for="weight1">Weight (kg) Set1</label>
                    <input type="number" id="weight1" class="accept-policy form-control mb-3" placeholder="@exercise.MaxWeight" />
                </div>
                <div>
                    <label for="reps1">Reps Set1</label>
                    <input type="number" id="reps1" class="accept-policy form-control mb-3" placeholder="@exercise.MaxReps"  />
                </div>
            </div>

            <div style="display: flex; gap: 10px">
                <div>
                    <label for="weight2">Weight (kg) Set2</label>
                    <input type="number" id="weight2" class="accept-policy form-control mb-3" placeholder="@exercise.MaxWeight" />
                </div>
                <div>
                    <label for="reps2">Reps Set2</label>
                    <input type="number" id="reps2" class="accept-policy form-control mb-3" placeholder="@exercise.MaxReps" />
                </div>
            </div>

            <div style="display: flex; gap: 10px">
                <div>
                    <label for="weight3">Weight (kg) Set3</label>
                    <input type="number" id="weight3" class="accept-policy form-control mb-3" placeholder="@exercise.MaxWeight" />
                </div>
                <div>
                    <label for="reps3">Reps Set3</label>
                    <input type="number" id="reps3" class="accept-policy form-control mb-3" placeholder="@exercise.MaxReps" />
                </div>
            </div>
        </div>


       
    }
    
}

<div class="mt-3">
    <button id="prevButton" class="btn btn-secondary">Previous</button>
    <button id="nextButton" class="btn btn-primary">Next</button>
</div>

<button id="submitButton" class="btn btn-success"
        data-bs-toggle="modal"
        data-bs-target="#confirmModal">
        Submit progress
</button>

<!-- Submit Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to submit this progress? Make sure you didn't leave any blank space</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSubmitBtn">
                    Confirm
                </button>
            </div>
        </div>
    </div>
</div>






<script>
    // Scroll through exercises functionality
    let currentIdx = 0;
    const exercises = document.querySelectorAll('.exercise-card');

    function showExercise(idx) {
        exercises.forEach((exercise, index) => {
            exercise.classList.toggle('d-none', index !== idx);
        });
        if(currentIdx == exercises.length - 1){
            document.getElementById('nextButton').hidden = true;
        }
        else if(currentIdx == 0){
            document.getElementById('prevButton').hidden = true;
        }
        else{
            document.getElementById('prevButton').hidden = false;
            document.getElementById('nextButton').hidden = false;
        }
    }

    document.getElementById('prevButton').addEventListener('click', () => {
        if (currentIdx > 0) {
            currentIdx--;
            showExercise(currentIdx);
            document.getElementById('nextButton').hidden = false;

        }
        // else{
        //     document.getElementById('prevButton').hidden = true;
        // }
    });

    document.getElementById('nextButton').addEventListener('click', () => {
        if (currentIdx < exercises.length - 1) {
            currentIdx++;
            showExercise(currentIdx);
            document.getElementById('prevButton').hidden = false;

        }
        // else{
        //     document.getElementById('nextButton').hidden = true;
        // }
    });

    showExercise(currentIdx);



    // Submit progress functionality
    document.getElementById('confirmSubmitBtn').addEventListener('click', async function() {
        const progressData = [];
           exercises.forEach(exercise => {
               const exerciseId = exercise.id.replace("exercise-", "");

               const weight1 = exercise.querySelector('#weight1').value;
               const weight2 = exercise.querySelector('#weight2').value;
               const weight3 = exercise.querySelector('#weight3').value;

               const reps1 = exercise.querySelector('#reps1').value;
               const reps2 = exercise.querySelector('#reps2').value;
               const reps3 = exercise.querySelector('#reps3').value;
               progressData.push({
                   workoutId: '@Model.WorkoutId',
                   exerciseId: exerciseId,
                   data: {weight1: weight1 == "" ? 0 : weight1, reps1: reps1 == "" ? 0 : reps1,
                           weight2: weight2 == "" ? 0 : weight2, reps2: reps2 == "" ? 0 : reps2,
                           weight3: weight3 == "" ? 0 : weight3, reps3: reps3 == "" ? 0 : reps3}
               });


           });
           console.log(progressData);

           try{
               const response = await fetch('/Progress/WorkoutProgress?handler=SubmitProgress',{
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                   },
                   body: JSON.stringify(progressData)
               });
               if (response.ok) {
                   const result = await response.json();
                   if (result.success) {
                       alert('Progress submitted successfully!');
                       // Optionally, redirect or update the UI
                   } else {
                       alert('Failed to submit progress: ' + result.message);
                   }
               } else {
                   alert('Error submitting progress: ' + response.statusText);
               }
           } catch (error) {
               console.error('Error:', error);
               showMessage('Error submiting progress. Please try again.', 'error');
           } finally{
               // redirect to the progress page
               window.location.href = '/Progress';
           }
    });

    // Submit progress functionality
    // document.getElementById('submitButton').addEventListener('click', async function() {
    //     const progressData = [];
    //     exercises.forEach(exercise => {
    //         const exerciseId = exercise.id.replace("exercise-", "");

    //         const weight1 = exercise.querySelector('#weight1').value;
    //         const weight2 = exercise.querySelector('#weight2').value;
    //         const weight3 = exercise.querySelector('#weight3').value;

    //         const reps1 = exercise.querySelector('#reps1').value;
    //         const reps2 = exercise.querySelector('#reps2').value;
    //         const reps3 = exercise.querySelector('#reps3').value;
    //         console.log("exerciseId: ",exerciseId," weight: ",weight1=="" ? 0 : weight1)
    //         progressData.push({
    //             workoutId: '@Model.WorkoutId',
    //             exerciseId: exerciseId,
    //             data: {weight1: weight1 == "" ? 0 : weight1, reps1: reps1 == "" ? 0 : reps1,
    //                     weight2: weight2 == "" ? 0 : weight2, reps2: reps2 == "" ? 0 : reps2,
    //                     weight3: weight3 == "" ? 0 : weight3, reps3: reps3 == "" ? 0 : reps3}
    //         });


    //     });
    //     console.log(progressData);
      
    //     try{
    //         const response = await fetch('/Progress/WorkoutProgress?handler=SubmitProgress',{
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                  'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
    //             },
    //             body: JSON.stringify(progressData)
    //         });
    //         if (response.ok) {
    //             const result = await response.json();
    //             if (result.success) {
    //                 alert('Progress submitted successfully!');
    //                 Optionally, redirect or update the UI
    //             } else {
    //                 alert('Failed to submit progress: ' + result.message);
    //             }
    //         } else {
    //             alert('Error submitting progress: ' + response.statusText);
    //         }
    //     } catch (error) {
    //         console.error('Error:', error);
    //         showMessage('Error submiting progress. Please try again.', 'error');
    //     } finally{
    //         redirect to the progress page
    //         window.location.href = '/Progress';
    //     }

        
    // })


</script>


<form method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>
