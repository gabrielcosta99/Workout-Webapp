@page
@model MyWebApp.Pages.Progress.HistoryModel
@{
    ViewData["title"] = "Workout History";
}


<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="fas fa-dumbbell me-2 text-primary"></i>My Workouts
                </h1>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (Model.Progresses.Any())
            {
                <div class="row">

                    @foreach (var progress in Model.Progresses)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 workout-card">
                                <div class="card-header bg-light">
                                    <h5 class="card-title mb-0">@progress.Workout.Title</h5>
                                </div>
                                <div class="btn-group w-100" role="group">

                                    <button class="btn btn-outline-primary quick-edit-btn"
                                            data-workoutProg-id="@progress.Id"
                                            data-workout-title="@progress.Workout.Title"
                                            data-bs-toggle="modal"
                                            data-bs-target="#quickEditModal">
                                        <i class="fas fa-edit me-1"></i> Edit 
                                    </button>
                                    <button class="btn btn-outline-danger delete-btn"
                                            data-workout-id="@progress.Id"
                                            data-workout-title="@progress.Workout.Title"
                                            data-bs-toggle="modal"
                                            data-bs-target="#deleteModal">
                                        <i class="fas fa-trash me-1"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-dumbbell fa-3x text-muted mb-3"></i>
                    <h3 class="text-muted">No progress registered yet</h3>
                    <p class="text-muted mb-4">Save your first workout progress to get started with your fitness journey!</p>
                    <a href="/Progress" class="btn btn-primary btn-lg">
                        <i class="fas fa-plus me-2"></i>Create Your First Progress
                    </a>
                </div>
            }
        </div>
    </div>
</div>


<!-- Quick Edit Modal -->
<div class="modal fade" id="quickEditModal" tabindex="-1" aria-labelledby="quickEditModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quickEditModalLabel">Quick Edit Exercise</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editExercisesForm">
                <div class="modal-body">
                    <p class="fw-bold" id="modalWorkoutTitle"></p>
                    <br />
                    <!-- Dynamically load exercises here -->
                    <div id="exercisesList">
                        <!-- Content will be loaded via JavaScript or partial view -->
                    </div>
                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@{
    ViewData["Message"] = "Are you sure you want to delete this progress? This action cannot be undone.";
}

<partial name="_DeleteModalPartial" />


<style>
    .workout-card {
        transition: all 0.3s ease;
        border: 1px solid #e9ecef;
    }

        .workout-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // ============== DELETE FUNCTIONALITY ==============
        let progressToDelete = null;

        // Handle delete button clicks
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                progressToDelete = {
                    id: this.dataset.workoutId,
                    name: this.dataset.workoutTitle,
                    element: this.closest('.col-sm-6, .col-lg-4')
                };

                // Show exercise name in the modal
                document.getElementById('workoutTitleToDelete').textContent = progressToDelete.title;
            });
        });

        // Handle confirm delete
        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (!progressToDelete) return;

            try {
                const formData = new FormData();
                formData.append('Id', progressToDelete.id);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                const response = await fetch('/Progress/History?handler=DeleteProgress', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Remove the workout card from the DOM
                    progressToDelete.element.remove();

                    // Close modal
                    bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();

                    // Show success message
                    showMessage('Workout deleted successfully!', 'success');

                    // Check if no workouts remain
                    const remainingWorkouts = document.querySelectorAll('.workout-card');
                    if (remainingWorkouts.length === 0) {
                        location.reload(); // Simple way to show the "no workouts" state
                    }
                } else {
                    showMessage('Error deleting workout. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Error deleting workout. Please try again.', 'error');
            } finally {
                progressToDelete = null;
            }
        });

        // Reset when modal is hidden
        document.getElementById('deleteModal').addEventListener('hidden.bs.modal', function() {
            progressToDelete = null;
        });






         // --------------- QUICK EDIT FUNCTIONALITY ---------------
        let currentWorkoutProgId = null;
        const form = document.getElementById('editExercisesForm');
        let formHandlerAttached = false;

        function createExerciseProgInput(exerciseId="",exerciseName = "",reps1 = 0,reps2 = 0,reps3 = 0,weight1 = 0,weight2 = 0,weight3 = 0){
            
            return `<div class="exercise-card" id="exercise-${exerciseId}">
                <h4>${exerciseName}</h4>
                <p>Set 1</p>
                <div style="display: flex; gap: 10px">
                    <div>
                        <label for="weight1-${exerciseId}">Weight (kg)</label>
                        <input type="number" id="weight1-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Weight (kg)" value=${weight1} />
                    </div>
                    <div>
                        <label for="reps1">Reps</label>
                        <input type="number" id="reps1-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Reps" value=${reps1} />
                    </div>
                </div>

                <p>Set 2</p>
                <div style="display: flex; gap: 10px">
                    <div>
                        <label for="weight2-${exerciseId}">Weight (kg)</label>
                        <input type="number" id="weight2-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Weight (kg)" value=${weight2} />
                    </div>
                    <div>
                        <label for="reps2">Reps</label>
                        <input type="number" id="reps2-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Reps" value=${reps2} />
                    </div>
                </div>


                <p>Set 3</p>
                <div style="display: flex; gap: 10px">
                    <div>
                        <label for="weight3-${exerciseId}">Weight (kg)</label>
                        <input type="number" id="weight3-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Weight (kg)" value=${weight3} />
                    </div>
                    <div>
                        <label for="reps3">Reps</label>
                        <input type="number" id="reps3-${exerciseId}" class="accept-policy form-control mb-3" placeholder="Reps" value=${reps3} />
                    </div>
                </div>
            </div>`
        }
        


        // Handle quick edit button clicks
        document.querySelectorAll('.quick-edit-btn').forEach(btn => {
            btn.addEventListener('click', async function () {
                const workoutProgId = this.getAttribute('data-workoutProg-id');
                const workoutTitle = this.getAttribute('data-workout-title');

                // Update current workout ID
                currentWorkoutProgId = workoutProgId;
                console.log("workoutProgId = ",workoutProgId);
                document.getElementById('modalWorkoutTitle').textContent = workoutTitle;

                try {
                    const workoutProgExercisesResponse = await fetch(`/Progress/History?handler=GetProgExercises&id=${currentWorkoutProgId}`);


                    if (workoutProgExercisesResponse.ok) {
                        const progressData = await  workoutProgExercisesResponse.json();

                        if (progressData.success ) {
                            // Build HTML for existing exercises
                            let exercisesProgHtml = '';
                            
                            
                             if (progressData.exercisesProg.length > 0) {
                                exercisesProgHtml = progressData.exercisesProg.map((e, index) => {
                                    console.log("e: ",e);
                                    const setArray = e.sets;
                                    return createExerciseProgInput(e.exerciseId,e.exerciseName,setArray[0].reps,setArray[1].reps,setArray[2].reps,setArray[0].weight,setArray[1].weight,setArray[2].weight);
                                }).join('');
                            }

                            // Set the HTML
                            document.getElementById('exercisesList').innerHTML = exercisesProgHtml;

                        }
                    } else {
                        console.error('Failed to load exercises');
                        alert('Failed to load exercises. Please try again.');
                    }
                } catch (err) {
                    console.error('Error loading exercises:', err);
                    alert('Error loading exercises. Please try again.');
                }
            });
        });
        
        // Function to handle form submission
        const handleFormSubmission = async function (e) {
            e.preventDefault();

            if (!currentWorkoutProgId) {
                console.error('No workout ID available');
                return;
            }

            const progressData = collectExerciseData();

            

            // const formData = new FormData();
            // formData.append('id', currentWorkoutProgId);
            // formData.append('progressData', JSON.stringify(progressData));
            // formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            try {
                const response = await fetch('/Progress/History?handler=UpdateProgress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        workoutProgId: currentWorkoutProgId,
                        progressData: progressData
                    })
                });


                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('quickEditModal'));
                        if (modal) modal.hide();
                        location.reload();
                    } else {
                        console.error('Server returned error:', result);
                        alert('Error updating exercises. Please try again.');
                    }
                } else {
                    console.error('HTTP error:', response.status, response.statusText);
                    const errorText = await response.text();
                    console.error('Error details:', errorText);
                    alert('Network error. Please try again.');
                }
            } catch (error) {
                console.error('Network error:', error);
                alert('Network error. Please try again.');
            }
        };

        // Attach form handler only once
        if (!formHandlerAttached) {
            form.addEventListener('submit', handleFormSubmission);
            formHandlerAttached = true;
        }

    });


    function showMessage(message, type) {
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';

        const alert = document.createElement('div');
        alert.className = `alert ${alertClass} alert-dismissible fade show`;
        alert.innerHTML = `
            <i class="fas ${icon} me-2"></i>${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        const container = document.querySelector('.container');
        const firstChild = container.querySelector('.row');
        container.insertBefore(alert, firstChild);

        setTimeout(() => {
            alert.remove();
        }, 3000);
    }

    function collectExerciseData() {
        const progressData = [];

        document.querySelectorAll('.exercise-card').forEach(card => {
            const exerciseId = card.id.replace("exercise-", "");

            const weight1 = card.querySelector(`#weight1-${exerciseId}`).value;
            const reps1   = card.querySelector(`#reps1-${exerciseId}`).value;
            const weight2 = card.querySelector(`#weight2-${exerciseId}`).value;
            const reps2   = card.querySelector(`#reps2-${exerciseId}`).value;
            const weight3 = card.querySelector(`#weight3-${exerciseId}`).value;
            const reps3   = card.querySelector(`#reps3-${exerciseId}`).value;

            progressData.push({
                exerciseId: parseInt(exerciseId),
                data: {
                    weight1: parseFloat(weight1) || 0,
                    reps1: parseInt(reps1) || 0,
                    weight2: parseFloat(weight2) || 0,
                    reps2: parseInt(reps2) || 0,
                    weight3: parseFloat(weight3) || 0,
                    reps3: parseInt(reps3) || 0
                }
            });
        });

        return progressData;
    }

</script>

@{
    // Add CSRF token for AJAX requests
}
<form method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>
